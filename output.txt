constant => number

term => constant

arith_exp => term

assign => arith_exp

num = 5
assign_stmt => id = assign

basic_stmt => assign_stmt

finalStatements => basic_stmt

term => id

arith_exp => term

constant => number

term => constant

arith_exp => term

arith_exp => arith_exp * arith_exp

T0 = num * 10
assign => arith_exp

a = T0
assign_stmt => id = assign

basic_stmt => assign_stmt

finalStatements => basic_stmt

func begin factorial
func param n
func param m
params => epsilon

params => , id params

params => id params

constant => number

term => constant

arith_exp => term

assign => arith_exp

n = 0
assign_stmt => id = assign

basic_stmt => assign_stmt

finalStatements => basic_stmt

constant => number

term => constant

arith_exp => term

assign => arith_exp

res = 1
assign_stmt => id = assign

basic_stmt => assign_stmt

finalStatements => basic_stmt

constant => number

term => constant

arith_exp => term

assign => arith_exp

fact = 1
assign_stmt => id = assign

basic_stmt => assign_stmt

finalStatements => basic_stmt

L0: 
term => id

arith_exp => term

constant => number

term => constant

arith_exp => term

bool_exp => arith_exp > arith_exp

T1 = n > 0
bool_factor => ( bool_exp )

bool_term => bool_factor

bool_exp => bool_term

T2 = not T1
if T2 goto L1
term => id

arith_exp => term

term => id

arith_exp => term

arith_exp => arith_exp * arith_exp

T3 = fact * n
assign => arith_exp

fact = T3
assign_stmt => id = assign

basic_stmt => assign_stmt

finalStatements => basic_stmt

term => id

arith_exp => term

constant => number

term => constant

arith_exp => term

arith_exp => arith_exp - arith_exp

T4 = n - 1
assign => arith_exp

n = T4
assign_stmt => id = assign

basic_stmt => assign_stmt

finalStatements => basic_stmt

term => id

arith_exp => term

print_values => arith_exp

print_stmt => print ( print_values )

basic_stmt => print_stmt

finalStatements => basic_stmt

term => id

arith_exp => term

print_values => arith_exp

print_stmt => print ( print_values )

basic_stmt => print_stmt

finalStatements => basic_stmt

end_suite => Dedent finalStatements

suite_while => \n end_suite_while

suite_while => \n Nodent finalStatements suite_while

suite_while => \n Nodent finalStatements suite_while

start_suite_while => \n Indent finalStatements suite_while

while_stmt => while bool_exp : start_suite

cmpd_stmt => while_stmt

finalStatements => cmpd_stmt

func end factorial
end_suite_func => epsilon

suite_func => \n end_suite_func

suite_func => \n Nodent finalStatements suite_func

suite_func => \n Nodent finalStatements suite_func

suite_func => \n Nodent finalStatements suite_func

start_suite_func => \n Indent finalStatements suite_func

func_def => def id ( param ) : start_suite_func

finalStatements => func_def

StartParse => epsilon

StartParse => finalStatements \n StartParse

StartParse => finalStatements \n StartParse

StartParse => finalStatements \n StartParse

StartParse => \n StartParse

StartParse => \n StartParse

StartParse => \n StartParse

StartParse => \n StartParse

StartParse => \n StartParse

Start => StartParse EOF


------------------->valid python syntax<--------------------



<------------>    <------>   <------>   <------> 	<------------>
Name                Type      value      Scope  	  Line number
------------       ------    ------ 	  ------ 	------------
a            	Identifier	50        	  0  		   7 
res          	Identifier	1         	  1  		  10 
m            	Identifier	null      	  1  		   8 
n            	Identifier	-1        	  1  		   8    9   12   13   14   14   15 
T0           	ICGtemporary	50        	  0  		   7 
T1           	ICGtemporary	0         	  1  		  12 
fact         	Identifier	0         	  1  		  11   13   13   16 
0            	Constant  	null      	  1  		   9   12 
1            	Constant  	null      	  1  		  10   11   14 
5            	Constant  	null      	  0  		   6 
T3           	ICGtemporary	0         	  1  		  13 
T4           	ICGtemporary	-1        	  1  		  14 
factorial    	Func_Name 	2         	  1  		   8 
num          	Identifier	5         	  0  		   6    7 
10           	Constant  	null      	  0  		   7 

------------------->quads before optimization<--------------------
=		5	(null)	num	
*		num	10	T0	
=		T0	(null)	a	
func begin		(null)	(null)	factorial	
func param		(null)	(null)	n	
func param		(null)	(null)	m	
=		0	(null)	n	
=		1	(null)	res	
=		1	(null)	fact	
Label		(null)	(null)	L0	
>		0	n	T1	
not		T1	(null)	T2	
if		T2	(null)	L1	
*		fact	n	T3	
=		T3	(null)	fact	
-		n	1	T4	
=		T4	(null)	n	
func end		(null)	(null)	factorial	

------------------->quads after optimization<--------------------
=		5	(null)	num	
*		5um	10	T0	
=		50	(null)	a	
func begin		(null)	(null)	factorial	
func param		(null)	(null)	n	
func param		(null)	(null)	m	
=		0	(null)	n	
=		1	(null)	res	
=		1	(null)	fact	
Label		(null)	(null)	L0	
>		0	-1	T1	
not		01	(null)	T2	
if		T2	(null)	L1	
*		0act	-1	T3	
=		03	(null)	fact	
-		-1	1	T4	
=		-1	(null)	n	
func end		(null)	(null)	factorial	
