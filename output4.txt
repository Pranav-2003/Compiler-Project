params => epsilon

params => , id params

params => id params

term => id

arith_exp => term

term => id

arith_exp => term

arith_exp => arith_exp + arith_exp

return_stmt => return arith_exp

basic_stmt => return_stmt

finalStatements => basic_stmt

end_suite_func => epsilon

suite_func => \n end_suite_func

start_suite_func => \n Indent finalStatements suite_func

func_def => def id ( param ) : start_suite_func

finalStatements => func_def

params => epsilon

params => , id params

params => id params

term => id

arith_exp => term

term => id

arith_exp => term

arith_exp => arith_exp - arith_exp

return_stmt => return arith_exp

basic_stmt => return_stmt

finalStatements => basic_stmt

end_suite_func => epsilon

suite_func => \n end_suite_func

start_suite_func => \n Indent finalStatements suite_func

func_def => def id ( param ) : start_suite_func

finalStatements => func_def

params => epsilon

params => , id params

params => id params

term => id

arith_exp => term

term => id

arith_exp => term

arith_exp => arith_exp * arith_exp

return_stmt => return arith_exp

basic_stmt => return_stmt

finalStatements => basic_stmt

end_suite_func => epsilon

suite_func => \n end_suite_func

start_suite_func => \n Indent finalStatements suite_func

func_def => def id ( param ) : start_suite_func

finalStatements => func_def

params => epsilon

params => , id params

params => id params

term => id

arith_exp => term

term => id

arith_exp => term

arith_exp => arith_exp * arith_exp

return_stmt => return arith_exp

basic_stmt => return_stmt

finalStatements => basic_stmt

end_suite_func => epsilon

suite_func => \n end_suite_func

start_suite_func => \n Indent finalStatements suite_func

func_def => def id ( param ) : start_suite_func

finalStatements => func_def

constant => string

term => constant

arith_exp => term

print_values => arith_exp

print_stmt => print ( print_values )

basic_stmt => print_stmt

finalStatements => basic_stmt

constant => string

term => constant

arith_exp => term

print_values => arith_exp

print_stmt => print ( print_values )

basic_stmt => print_stmt

finalStatements => basic_stmt

constant => string

term => constant

arith_exp => term

print_values => arith_exp

print_stmt => print ( print_values )

basic_stmt => print_stmt

finalStatements => basic_stmt

constant => string

term => constant

arith_exp => term

print_values => arith_exp

print_stmt => print ( print_values )

basic_stmt => print_stmt

finalStatements => basic_stmt

constant => string

term => constant

arith_exp => term

print_values => arith_exp

print_stmt => print ( print_values )

basic_stmt => print_stmt

finalStatements => basic_stmt

bool_term => True

bool_exp => bool_term

term => input ( string )

arith_exp => term

assign => arith_exp

assign_stmt => id = assign

basic_stmt => assign_stmt

finalStatements => basic_stmt

term => input ( string )

arith_exp => term

assign => arith_exp

assign_stmt => id = assign

basic_stmt => assign_stmt

finalStatements => basic_stmt

term => input ( string )

arith_exp => term

assign => arith_exp

assign_stmt => id = assign

basic_stmt => assign_stmt

finalStatements => basic_stmt

term => id

arith_exp => term

constant => string

term => constant

arith_exp => term

bool_term => arith_exp == arith_exp

bool_exp => bool_term

term => id

arith_exp => term

constant => string

term => constant

arith_exp => term

term => id

arith_exp => term

constant => string

term => constant

arith_exp => term

term => id

arith_exp => term

list_elements => id list_element

func_call => id ( list_elements )

print_values => func_call

print_values => arith_exp , print_values

print_values => arith_exp , print_values

print_values => arith_exp , print_values

print_values => arith_exp , print_values

print_stmt => print ( print_values )

basic_stmt => print_stmt

finalStatements => basic_stmt

end_suite => Dedent

suite => \n end_suite

start_suite => \n Indent finalStatements

term => id

arith_exp => term

constant => string

term => constant

arith_exp => term

bool_term => arith_exp == arith_exp

bool_exp => bool_term

term => id

arith_exp => term

constant => string

term => constant

arith_exp => term

term => id

arith_exp => term

constant => string

term => constant

arith_exp => term

term => id

arith_exp => term

list_elements => id list_element

func_call => id ( list_elements )

print_values => func_call

print_values => arith_exp , print_values

print_values => arith_exp , print_values

print_values => arith_exp , print_values

print_values => arith_exp , print_values

print_stmt => print ( print_values )

basic_stmt => print_stmt

finalStatements => basic_stmt

end_suite => Dedent

suite => \n end_suite

start_suite => \n Indent finalStatements

term => id

arith_exp => term

constant => string

term => constant

arith_exp => term

bool_term => arith_exp == arith_exp

bool_exp => bool_term

term => id

arith_exp => term

constant => string

term => constant

arith_exp => term

term => id

arith_exp => term

constant => string

term => constant

arith_exp => term

term => id

arith_exp => term

list_elements => id list_element

func_call => id ( list_elements )

print_values => func_call

print_values => arith_exp , print_values

print_values => arith_exp , print_values

print_values => arith_exp , print_values

print_values => arith_exp , print_values

print_stmt => print ( print_values )

basic_stmt => print_stmt

finalStatements => basic_stmt

end_suite => Dedent

suite => \n end_suite

start_suite => \n Indent finalStatements

term => id

arith_exp => term

constant => string

term => constant

arith_exp => term

bool_term => arith_exp == arith_exp

bool_exp => bool_term

term => id

arith_exp => term

constant => string

term => constant

arith_exp => term

term => id

arith_exp => term

constant => string

term => constant

arith_exp => term

term => id

arith_exp => term

list_elements => id list_element

func_call => id ( list_elements )

print_values => func_call

print_values => arith_exp , print_values

print_values => arith_exp , print_values

print_values => arith_exp , print_values

print_values => arith_exp , print_values

print_stmt => print ( print_values )

basic_stmt => print_stmt

finalStatements => basic_stmt

end_suite => Dedent

suite => \n end_suite

start_suite => \n Indent finalStatements

continue_stmt => continue

basic_stmt => continue_stmt

finalStatements => basic_stmt

term => input ( string )

arith_exp => term

assign => arith_exp

assign_stmt => id = assign

basic_stmt => assign_stmt

finalStatements => basic_stmt

end_suite => Dedent finalStatements

suite => \n end_suite

start_suite => \n Indent finalStatements

else_stmt => else : start_suite

elif_stmts => else_stmt

elif_stmts => elif bool_exp : start_suite elif_stmts

elif_stmts => elif bool_exp : start_suite elif_stmts

elif_stmts => elif bool_exp : start_suite elif_stmts

if_opt => elif_stmtsif_stmt => if bool_exp : start_suite if_opt

cmpd_stmt => if_stmt

finalStatements => cmpd_stmt

term => id

arith_exp => term

constant => string

term => constant

arith_exp => term

bool_term => arith_exp == arith_exp

bool_exp => bool_term

break_stmt => break

basic_stmt => break_stmt

finalStatements => basic_stmt

constant => string

term => constant

arith_exp => term

print_values => arith_exp

print_stmt => print ( print_values )

basic_stmt => print_stmt

finalStatements => basic_stmt

end_suite => Dedent finalStatements

suite => \n end_suite

start_suite => \n Indent finalStatements

if_opt => T_ifif_stmt => if bool_exp : start_suite if_opt

cmpd_stmt => if_stmt

finalStatements => cmpd_stmt

end_suite => epsilon

suite_while => \n end_suite_while

suite_while => \n Nodent finalStatements suite_while

suite_while => \n Nodent finalStatements suite_while

suite_while => \n Nodent finalStatements suite_while

suite_while => \n Nodent finalStatements suite_while

start_suite_while => \n Indent finalStatements suite_while

while_stmt => while bool_exp : start_suite

cmpd_stmt => while_stmt

finalStatements => cmpd_stmt

StartParse => epsilon

StartParse => finalStatements \n StartParse

StartParse => \n StartParse

StartParse => finalStatements \n StartParse

StartParse => finalStatements \n StartParse

StartParse => finalStatements \n StartParse

StartParse => finalStatements \n StartParse

StartParse => finalStatements \n StartParse

StartParse => \n StartParse

StartParse => finalStatements \n StartParse

StartParse => \n StartParse

StartParse => finalStatements \n StartParse

StartParse => \n StartParse

StartParse => finalStatements \n StartParse

StartParse => \n StartParse

StartParse => finalStatements \n StartParse

StartParse => \n StartParse

Start => StartParse EOF


------------------->valid python syntax<--------------------



<------------>    <------>          <------>   <------> 	<------------>
Name                Type             value      Scope  	  Line number
------------       ------            ------ 	  ------ 	------------
"-"          	Constant            	null      	  4  		  31 
x            	Identifier          	null      	  4  		  14   15 
x            	Identifier          	null      	  3  		  10   11 
x            	Identifier          	null      	  2  		   6    7 
x            	Identifier          	null      	  1  		   2    3 
y            	Identifier          	null      	  4  		  14   15 
y            	Identifier          	null      	  3  		  10   11 
y            	Identifier          	null      	  2  		   6    7 
y            	Identifier          	null      	  1  		   2    3 
T0           	ICGtemporary        	0         	  1  		   3 
'1'          	Constant            	null      	  4  		  28 
T1           	ICGtemporary        	0         	  2  		   7 
True         	Constant            	null      	  4  		  24 
'2'          	Constant            	null      	  4  		  30 
"/"          	Constant            	null      	  4  		  35 
T2           	ICGtemporary        	0         	  3  		  11 
'3'          	Constant            	null      	  4  		  32 
nextcalculation 	Identifier          	nextcalculation	  4  		  38   39 
T3           	ICGtemporary        	0         	  4  		  15 
'4'          	Constant            	null      	  4  		  34 
num1         	Identifier          	num1      	  4  		  26   29   29   31   31   33   33   35   35 
num2         	Identifier          	num2      	  4  		  27   29   29   31   31   33   33   35   35 
choice       	Identifier          	choice    	  4  		  25   28   30   32   34 
"2.Subtract" 	Constant            	null      	  4  		  20 
multiply     	Func_Name           	2         	  3  		  10 
"="          	Constant            	null      	  4  		  29   31   33   35 
"4.Divide"   	Constant            	null      	  4  		  22 
"no"         	Constant            	null      	  4  		  39 
"*"          	Constant            	null      	  4  		  33 
"Select operation." 	Constant            	null      	  4  		  18 
"3.Multiply" 	Constant            	null      	  4  		  21 
"1.Add"      	Constant            	null      	  4  		  19 
"---------------------------------" 	Constant            	null      	  4  		  41 
divide       	Func_Name           	2         	  4  		  14 
subtract     	Func_Name           	2         	  2  		   6 
"+"          	Constant            	null      	  4  		  29 
add          	Func_Name           	2         	  1  		   2 

func begin add
func param x
func param y
T0 = x + y
func end add
func begin subtract
func param x
func param y
T1 = x - y
func end subtract
func begin multiply
func param x
func param y
T2 = x * y
func end multiply
func begin divide
func param x
func param y
T3 = x * y
func end divide
L0:
T4 = not "4.Divide"
if T4 goto L1
"4.Divide" = =
"4.Divide" = =
"4.Divide" = =
T5 = not '1'
if T5 goto L2
func arg num1
func arg num2
call func add
L2:
goto L6
L0:
T6 = not '2'
if T6 goto L5
func arg num1
func arg num2
call func subtract
L5:
goto L7
L4:
goto L10
L7:
T7 = not '3'
if T7 goto L9
func arg num1
func arg num2
call func multiply
L9:
goto L11
L8:
goto L14
L11:
T8 = not '4'
if T8 goto L13
func arg num1
func arg num2
call func divide
L13:
goto L15
L12:
num2 = =
L15:
T9 = not "no"
if T9 goto L17
L17:
goto L0
L18:


------------------->quads<--------------------
func begin		              (null)	              (null)	                 add	
func param		              (null)	              (null)	                   x	
func param		              (null)	              (null)	                   y	
         +		                   x	                   y	                  T0	
  func end		              (null)	              (null)	                 add	
func begin		              (null)	              (null)	            subtract	
func param		              (null)	              (null)	                   x	
func param		              (null)	              (null)	                   y	
         -		                   x	                   y	                  T1	
  func end		              (null)	              (null)	            subtract	
func begin		              (null)	              (null)	            multiply	
func param		              (null)	              (null)	                   x	
func param		              (null)	              (null)	                   y	
         *		                   x	                   y	                  T2	
  func end		              (null)	              (null)	            multiply	
func begin		              (null)	              (null)	              divide	
func param		              (null)	              (null)	                   x	
func param		              (null)	              (null)	                   y	
         *		                   x	                   y	                  T3	
  func end		              (null)	              (null)	              divide	
     Label		              (null)	              (null)	                  L0	
       not		          "4.Divide"	              (null)	                  T4	
        if		                  T4	              (null)	                  L1	
         =		                   =	              (null)	          "4.Divide"	
         =		                   =	              (null)	          "4.Divide"	
         =		                   =	              (null)	          "4.Divide"	
       not		                 '1'	              (null)	                  T5	
        if		                  T5	              (null)	                  L2	
  func arg		              (null)	              (null)	                num1	
  func arg		              (null)	              (null)	                num2	
 call func		              (null)	              (null)	                 add	
     Label		              (null)	              (null)	                  L2	
      goto		              (null)	              (null)	                  L6	
     Label		              (null)	              (null)	                  L0	
       not		                 '2'	              (null)	                  T6	
        if		                  T6	              (null)	                  L5	
  func arg		              (null)	              (null)	                num1	
  func arg		              (null)	              (null)	                num2	
 call func		              (null)	              (null)	            subtract	
     Label		              (null)	              (null)	                  L5	
      goto		              (null)	              (null)	                  L7	
     Label		              (null)	              (null)	                  L4	
      goto		              (null)	              (null)	                 L10	
     Label		              (null)	              (null)	                  L7	
       not		                 '3'	              (null)	                  T7	
        if		                  T7	              (null)	                  L9	
  func arg		              (null)	              (null)	                num1	
  func arg		              (null)	              (null)	                num2	
 call func		              (null)	              (null)	            multiply	
     Label		              (null)	              (null)	                  L9	
      goto		              (null)	              (null)	                 L11	
     Label		              (null)	              (null)	                  L8	
      goto		              (null)	              (null)	                 L14	
     Label		              (null)	              (null)	                 L11	
       not		                 '4'	              (null)	                  T8	
        if		                  T8	              (null)	                 L13	
  func arg		              (null)	              (null)	                num1	
  func arg		              (null)	              (null)	                num2	
 call func		              (null)	              (null)	              divide	
     Label		              (null)	              (null)	                 L13	
      goto		              (null)	              (null)	                 L15	
     Label		              (null)	              (null)	                 L12	
         =		                   =	              (null)	                num2	
     Label		              (null)	              (null)	                 L15	
       not		                "no"	              (null)	                  T9	
        if		                  T9	              (null)	                 L17	
     Label		              (null)	              (null)	                 L17	
      goto		              (null)	              (null)	                  L0	
     Label		              (null)	              (null)	                 L18	

------------------->quads after optimization<--------------------
func begin		              (null)	              (null)	                 add	
func param		              (null)	              (null)	                   x	
func param		              (null)	              (null)	                   y	
         +		                   x	                   y	                  T0	
  func end		              (null)	              (null)	                 add	
func begin		              (null)	              (null)	            subtract	
func param		              (null)	              (null)	                   x	
func param		              (null)	              (null)	                   y	
         -		                   x	                   y	                  T1	
  func end		              (null)	              (null)	            subtract	
func begin		              (null)	              (null)	            multiply	
func param		              (null)	              (null)	                   x	
func param		              (null)	              (null)	                   y	
         *		                   x	                   y	                  T2	
  func end		              (null)	              (null)	            multiply	
func begin		              (null)	              (null)	              divide	
func param		              (null)	              (null)	                   x	
func param		              (null)	              (null)	                   y	
         *		                   x	                   y	                  T3	
  func end		              (null)	              (null)	              divide	
         =		                   =	              (null)	          "4.Divide"	
         =		                   =	              (null)	          "4.Divide"	
         =		                   =	              (null)	          "4.Divide"	
     Label		              (null)	              (null)	                 L17	
      goto		              (null)	              (null)	                  L0	
     Label		              (null)	              (null)	                  L0	
       not		          "4.Divide"	              (null)	                  T4	
        if		                  T4	              (null)	                  L1	
       not		                 '1'	              (null)	                  T5	
        if		                  T5	              (null)	                  L2	
  func arg		              (null)	              (null)	                num1	
  func arg		              (null)	              (null)	                num2	
 call func		              (null)	              (null)	                 add	
     Label		              (null)	              (null)	                  L2	
      goto		              (null)	              (null)	                  L6	
     Label		              (null)	              (null)	                  L0	
       not		                 '2'	              (null)	                  T6	
        if		                  T6	              (null)	                  L5	
  func arg		              (null)	              (null)	                num1	
  func arg		              (null)	              (null)	                num2	
 call func		              (null)	              (null)	            subtract	
     Label		              (null)	              (null)	                  L5	
      goto		              (null)	              (null)	                  L7	
     Label		              (null)	              (null)	                  L4	
      goto		              (null)	              (null)	                 L10	
     Label		              (null)	              (null)	                  L7	
       not		                 '3'	              (null)	                  T7	
        if		                  T7	              (null)	                  L9	
  func arg		              (null)	              (null)	                num1	
  func arg		              (null)	              (null)	                num2	
 call func		              (null)	              (null)	            multiply	
     Label		              (null)	              (null)	                  L9	
      goto		              (null)	              (null)	                 L11	
     Label		              (null)	              (null)	                  L8	
      goto		              (null)	              (null)	                 L14	
     Label		              (null)	              (null)	                 L11	
       not		                 '4'	              (null)	                  T8	
        if		                  T8	              (null)	                 L13	
  func arg		              (null)	              (null)	                num1	
  func arg		              (null)	              (null)	                num2	
 call func		              (null)	              (null)	              divide	
     Label		              (null)	              (null)	                 L13	
      goto		              (null)	              (null)	                 L15	
     Label		              (null)	              (null)	                 L12	
         =		                   =	              (null)	                num2	
     Label		              (null)	              (null)	                 L15	
       not		                "no"	              (null)	                  T9	
        if		                  T9	              (null)	                 L17	
     Label		              (null)	              (null)	                 L18	
